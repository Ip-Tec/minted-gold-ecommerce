generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int    @id @default(autoincrement())
  username  String @unique(map: "Admin_username_key")
  email     String @unique(map: "Admin_email_key")
  provider  String
  adminrole String
  name      String @default("")

  role     Role      @relation(fields: [adminrole], references: [name], map: "Admin_adminrole_fkey")
  products Product[]
  roles    Role[]    @relation("admintorole")
}

model Order {
  id          Int       @id @default(autoincrement())
  orderNumber String
  orderStatus String
  buyerId     Int
  createdAt   DateTime  @default(now())
  buyer       Buyer     @relation(fields: [buyerId], references: [id], map: "Order_buyerId_fkey")
  products    Product[] @relation("ordertoproduct")

  @@index([buyerId], map: "Order_buyerId_fkey")
}

model Product {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  price       Float
  adminName   String
  category    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  image       Json
  stock       String
  user        User      @relation(fields: [adminName], references: [email], map: "Product_adminName_fkey")
  categories  Categorie @relation(fields: [category], references: [name], map: "Product_categorie_fkey")
  orders      Order[]   @relation("ordertoproduct")
  buyer       Buyer[]   @relation("wishlistitem")
  buyers      User[]    @relation("wishlistitem")
  Admin       Admin?    @relation(fields: [adminId], references: [id])
  adminId     Int?

  @@index([adminName], map: "Product_adminName_fkey")
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique(map: "Role_name_key")
  description String
  admins      Admin[] @relation("admintorole")
  Admin       Admin[]
}

model Categorie {
  id          Int       @id @default(autoincrement())
  name        String    @unique(map: "Categorie_name_key")
  description String
  product     Product[]
}

model Buyer {
  id            Int       @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String    @unique(map: "Buyer_email_key")
  contactNumber String
  password      String
  createdAt     DateTime  @default(now())
  isActive      Boolean   @default(true)
  orders        Order[]
  products      Product[] @relation("wishlistitem")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  products      Product[]
  accounts      Account[]
  sessions      Session[]
  wishlist      Product[] @relation("wishlistitem")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
